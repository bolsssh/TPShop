//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using ICSSoft.STORMNET;
using ICSSoft.STORMNET.Business;
using System;
using System.Collections;
using System.Linq;
using System.Xml;
using ICSSoft.STORMNET.FunctionalLanguage;

namespace IIS.Shop
{


    // *** Start programmer edit section *** (Using statements)

    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// OrderBS.
    /// </summary>
    // *** Start programmer edit section *** (OrderBS CustomAttributes)

    // *** End programmer edit section *** (OrderBS CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class OrderBS : ICSSoft.STORMNET.Business.BusinessServer
    {

        // *** Start programmer edit section *** (OrderBS CustomMembers)
        private static DataObject[] CreateInvoice(IIS.Shop.Order order)
        {

            var invoice = new IIS.Shop.Invoice();
            foreach (OrderItem item in order.OrderItem)
            {
                invoice.InvoiceItem.Add(new InvoiceItem()
                {
                    Amount = item.Amount,
                    Product = item.Product,
                    Price = item.Product.Price * 1.1,
                    TotalSum = item.Amount * item.Product.Price * 1.1,
                    Weight = item.Product.Weight
                });
            }

            var sum = 0d;
            var sumW = 0d;
            foreach (InvoiceItem item in invoice.InvoiceItem)
            {
                sum += item.TotalSum;
                sumW += item.Amount * item.Weight;
            }
            invoice.CreateDate=DateTime.Now;
            invoice.TotalSum=sum;
            invoice.Order = order;
            invoice.ResponsiblePerson = order.Manager;
            //invoice.ShipmentDateTime = order.ShipmentDate;
            invoice.TotalWeight = sumW;
            return new DataObject[]{invoice};
        }
        private static SortedList SortValues(DataObject[] objs)
        {
            var sortedProducts=new SortedList();
            for (int i = 0; i < objs.Length; i++)
            {
                var primaryKey = ((StoreProduct)objs[i]).Product.__PrimaryKey;
                ArrayList productList;
                if (sortedProducts.ContainsKey(primaryKey))
                {
                    productList = (ArrayList)sortedProducts[primaryKey];
                    productList.Add(objs[i]);
                }
                else
                {
                    productList = new ArrayList();
                    productList.Add(objs[i]);
                    sortedProducts.Add(primaryKey, productList);
                }
            }

            return sortedProducts;
        }
        /// <summary>
        /// Перевод заказа в статус "Оплачено"
        /// </summary>
        /// <param name="UpdatedObject">Заказ</param>
        /// <returns>Список измененных объектов (заказ + товары на складе)</returns>
        private static DataObject[] changeOrderStatusPaid(IIS.Shop.Order UpdatedObject)
        {
            // Определим массив, который будем возвращать для обновления.
            var ret = new DataObject[0];

            // Построим ограничение и вычитаем все объекты StoreProduct, которые нам подходят.
            var order = UpdatedObject;
            Function limitFunction = null;

            for (int i = 0; i < order.OrderItem.Count; i++)
            {
                var storeProduct = FunctionBuilder.BuildEquals<StoreProduct>(x => x.Product, order.OrderItem[i].Product);
                if (order.OrderItem[i].Product != null)
                {
                    limitFunction = limitFunction == null ? storeProduct : FunctionBuilder.BuildOr(limitFunction, storeProduct);
                }
            }

            var loadingCustomizationStruct = LoadingCustomizationStruct.GetSimpleStruct(typeof(StoreProduct), "StoreProductE");
            loadingCustomizationStruct.LimitFunction = limitFunction;


            var sortColumns = new List<ColumnsSortDef>();
            sortColumns.Add(new ColumnsSortDef("Storehouse.Number", SortOrder.Asc));
            loadingCustomizationStruct.ColumnsSort = sortColumns.ToArray();

            var objs = DataServiceProvider.DataService.LoadObjects(loadingCustomizationStruct);
            var sortedProducts = SortValues(objs);

            // Определим строчку для сообщения об ошибке. 
            var errStr = string.Empty;
            var retObjs = new ArrayList();

            // Проверим наличие товара на складах, если не хватает, то выдадим сообщение об ошибке, если хватает, то вычитаем количество.
            for (var i = 0; i < order.OrderItem.Count; i++)
            {
                if (sortedProducts.ContainsKey(order.OrderItem[i].Product.__PrimaryKey))
                {
                    var products = ((ArrayList)sortedProducts[order.OrderItem[i].Product.__PrimaryKey]);

                    var productTotalCount = 0;
                    for (var j = 0; j < products.Count; j++)
                    {
                        productTotalCount += ((StoreProduct)products[j]).Amount;
                    }

                    if (productTotalCount < order.OrderItem[i].Amount)
                    {
                        errStr += " Не хватает товара \"" + order.OrderItem[i].Product.Name
                            + "\" в наличии: " + productTotalCount
                            + ", требуется " + order.OrderItem[i].Amount
                            + Environment.NewLine;
                    }
                    else
                    {
                        var count = order.OrderItem[i].Amount;
                        for (var j = 0; j < products.Count; j++)
                        {
                            if (count > 0 && ((StoreProduct)products[j]).Amount > count)
                            {
                                ((StoreProduct)products[j]).Amount -= count;
                                count = 0;
                                retObjs.Add(products[j]);
                            }
                            else if (count > 0)
                            {
                                count -= ((StoreProduct)products[j]).Amount;
                                ((StoreProduct)products[j]).SetStatus(ObjectStatus.Deleted);
                                retObjs.Add(products[j]);
                            }
                        }
                    }
                }
                else
                {
                    errStr += "Товар	\"" +
                    order.OrderItem[i].Product.Name + "\" в наличии отсутствует." + Environment.NewLine;
                }

                // В случае, если чего-то не хватило, сообщаем об этом пользователю.
                if (errStr != string.Empty)
                {
                    throw new Exception(errStr);
                }

                //retObjs.Add(CreateInvoice(UpdatedObject));
                // Если всё нормально, то возвращаем массив объектов, которые надо обновить.
                ret = new DataObject[retObjs.Count];
                retObjs.CopyTo(ret, 0);
            }
            return ret;
        }

        // *** End programmer edit section *** (OrderBS CustomMembers)


        // *** Start programmer edit section *** (OnUpdateOrder CustomAttributes)

        // *** End programmer edit section *** (OnUpdateOrder CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateOrder(IIS.Shop.Order UpdatedObject)
        {
            var result = new List<DataObject>(){UpdatedObject};
            //if (UpdatedObject.GetStatus() )
            //{
            //   // var invoice = CreateInvoice(UpdatedObject);
            //    //DataServiceProvider.DataService.UpdateObjects(ref invoice);
            //    result.AddRange(CreateInvoice(UpdatedObject));
            //    //DataService.LoadObject(IIS.Shop.Invoice.Views.InvoiceE, CreateInvoice(UpdatedObject));
            //}
            // *** Start programmer edit section *** (OnUpdateOrder)
            if ((UpdatedObject.GetStatus() == ObjectStatus.Created
                 || UpdatedObject.GetStatus() == ObjectStatus.Altered)
                && Array.IndexOf(UpdatedObject.GetAlteredPropertyNames(), "Status") >= 0
                && UpdatedObject.Status == OrderStatus.Paid)
            {
                result.AddRange(changeOrderStatusPaid(UpdatedObject));
                result.AddRange(CreateInvoice(UpdatedObject));
            }

            return result.ToArray();
            // *** End programmer edit section *** (OnUpdateOrder)
        }
    }
}
